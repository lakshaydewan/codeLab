addFile: (parentPathe: string, FileName: string, type: FileType) => {
    set((state) => {
      const newFiles = structuredClone(state.files) as FileSystemTree
      const parentPath = parentPathe // Default to root if no parent path is provided
      const name = FileName
      const fileType = type
      const content = ''

      if (parentPath === 'root') {
        newFiles[name] = {
          file: { contents: content }
        };
        
        return { files: newFiles };
      }
      // Split the parent path into parts
      const pathParts = parentPath.split('/').filter(Boolean);
      let currentNode = newFiles;

      // Traverse the tree to find the parent directory
      for (let i = 0; i < pathParts.length; i++) {
        const part = pathParts[i];
        if (!currentNode[part] || !('directory' in currentNode[part])) {
          currentNode[part] = { directory: {} };
        }
        currentNode = currentNode[part].directory;
      }

      // Add the new file
      currentNode[name] = {
        file: { contents: content }
      };

      return { files: newFiles };
    });
  },